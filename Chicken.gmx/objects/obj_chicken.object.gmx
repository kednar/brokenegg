<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_chicken_still_NPC</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables

randomize()

alive = 1;
dir = -1;
movespeed = 1;
grav = 0.1;
hsp = 0;
vsp = 0;
fearofheights = 0;

egg_counter = 0;
egg_delay = 60;

moving = 1;
hit = 0;

idle_counter = 0;
dir_counter = 0;
stop_counter = 0;

idle_delay = random_range(60,400); // idle counter
dir_delay = random_range(60,600); // direction counter
stop_delay = random_range(60,200); // just stop for a second counter
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resume Movement
moving = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop for a second
sprite_index = spr_chicken_idle_blink;
image_xscale = dir;
stop_delay = random_range(60,200);
alarm[3] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change direction
dir = dir*(-1);
idle_delay = random_range(60,600);
sprite_index = spr_chicken_still_NPC;
image_xscale = dir;
alarm[3] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Idle Behavior
idle_delay = random_range(60,400);
switch round((random_range(1,4)))
    {
    case 1: sprite_index = spr_chicken_idle_sit; image_xscale = dir; alarm[3] = 215; break;
    case 2: sprite_index = spr_chicken_idle_sit; image_xscale = dir; alarm[3] = 215; break;
    default: sprite_index = spr_chicken_idle_pick; image_xscale = dir; alarm[3] = 100; break;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hsp = dir * movespeed; // basic horizontal movement
vsp += grav;

// Check if hit by Egg
if hit = 1
    {
    moving = 0;
    sprite_index = spr_chicken_hit;
    image_xscale = dir;
    alarm[3] = 30;
    hit = 0;
    }

// Horizontal Collision
if (place_meeting(x+hsp,y,obj_collision))
    {
    while (!place_meeting(x+sign(hsp),y,obj_collision))
        {
        x += sign(hsp); // slow down for pixel perfect collision
        }
    hsp = 0;
    dir *= -1;  // make enemy change direction
    }

// Vertical Collision
if (place_meeting(x,y+vsp,obj_collision))
    {
    while (!place_meeting(x,y+sign(vsp),obj_collision))    
        {
        y += sign(vsp);
        }
    vsp = 0;
    if (fearofheights) &amp;&amp; !position_meeting(x+(sprite_width/2)*dir, y+(sprite_height/2)+8, obj_wall_32x32)
        {
        dir *= -1; // don't fall of ledges if fearofheights = 1
        }    
    }

    
// MOVEMENT
y += vsp;
if (moving == 1)
    {
    sprite_index = spr_chicken_walk;
    image_xscale = dir;
    x += hsp;
    idle_counter += 1;
    dir_counter += 1;
    stop_counter += 1;
    }

// 
if idle_counter &gt;= idle_delay
    {
    moving = 0;
    alarm[0] = 1;
    idle_counter = 0;
    }
    
if dir_counter &gt;= dir_delay
    {
    moving = 0;
    alarm[1] = 1;
    dir_counter = 0;
    }

if stop_counter &gt;= stop_delay
    {
    moving = 0;
    alarm[2] = 1;
    stop_counter = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>613</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>stamina</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>x</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>y</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>25,25</point>
    <point>25,25</point>
  </PhysicsShapePoints>
</object>
